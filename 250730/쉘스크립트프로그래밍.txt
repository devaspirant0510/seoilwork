#shell script 프로그래밍(변수, 함수, 조건문, 반복문, 연산자)
script:모아서 명령들을 한번에 처리하는 언어

#파일의 기본구조
vim exec1.sh

#!/bin/sh
변수선언
콘솔상의 명령(ls)
제어문
연산자

chmod 755 exec1.sh
./exec1.sh

755의미 : 000(owner) 000(group) 000(other)
000 -> rwx -> 7 ->111
r:읽기가능(1)
w:쓰기가능(1)
x:실행가능(1)

#조건문
if [ 조건식 ]; then
    # 명령어들
elif [ 조건식 ]; then
    # 명령어들
else
    # 명령어들
fi

**********중요*********
if [ -x 파일명 ]; then
    # 파일이 실행 가능할 때 실행할 명령어
fi
-x 파일명 : 해당 파일이 존재하고, 실행 권한이 있으면 참(true)

없으면 거짓(false)

# -z, -n (파일 안의 내용이 비어 있는지 확인)
if [ -z "$변수" ]; then
    # 변수의 값이 빈 문자열일 때 실행
fi
-z 문자열 : 문자열 길이가 0이면 참(true)
-n 옵션은 문자열이 비어있지 않은지 (길이가 0이 아닌지) 
-e 옵션은 파일(또는 디렉토리)이 존재하는지 검사
-d는 파일이 존재하면서 디렉토리일 때 참(true)
if [ -e $file ], if [ ! -e $file ] : 부정
if [ -d "$dir" ]

실습:
vi if.sh


chmod 755 if.sh
./if.sh

case "$변수" in
    패턴1)
        명령어 ;;
    패턴2)
        명령어 ;;
    *)
        기본 명령어 ;;
esac

실습
vi case.sh
#!/bin/bash

read -p "요일을 입력하세요 (mon, tue, ...): " day

case $day in
    mon)
        echo "월요일입니다." ;;
    tue)
        echo "화요일입니다." ;;
    *)
        echo "잘못된 입력입니다." ;;
esac
------------------
for 변수 in 값1 값2 값3; do
    명령어
done

for ((초기값; 제어값; 증가값 )); do
	명령어
done
참고)(( ))함수이면서 연산이 들어갈 때 사용

while [ 조건 ]; do
    명령어
done

until [ 조건 ]; do
    명령어
done

#두 수를 입력받아 합하는 쉘프로그램 만드시오.
#!/bin/sh
read -p "input number1=" su1
read -p "input number2=" su2
c=su1+su2 : 단순히 su1+su2문자로 인식
#c = ((su1 + su2))
#c=(($su1 + $su2)) #오류원인 (())앞에 $가 없음
c=$(($su1 + $su2)) #정상실행
c=$(($su1+$su2)) #정상실행
c=$((su1+su2)) #정상실행
c = `expr $su1 + $su2` # 오류원인 =앞뒤로 띄워쓰기
c=`expr $su1 + $su2` #정상실행
echo $c

let c=su1+su2 명령에서 let을 사용하기 위해서는 bash필요
#!/bin/bash

결론 : 
$는 값을 의미
(())연산자 안에서는 연산자의 공백이 필요없음
연산결과를 변수에 넣을 때 result=$() 띄워쓰기 안됨
result = `expr`  띄워쓰기해야함

echo "expr ${a} + ${b}" : 단순한 문자열
echo "`expr ${a} + ${b}`" : 연산값

#매개변수
echo $0 파일명
echo $1 1번째 매개변수 값
echo $2 2번째 매개변수 값
echo "전체 매개변수의 갯수 : ${#}"  # 파일명은 갯수에 포함안됨
echo ${*} #전체 값 출력
echo ${@} #전체 값 출력
echo $! # 실행을 위해 보내진 마지막 프로세스  번호
echo $$ #pid
echo $? #반환값
문제: add.sh 100 200 처리되는 더하는 스크립트 작성



















